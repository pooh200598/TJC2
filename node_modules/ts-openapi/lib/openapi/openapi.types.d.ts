import Joi from "joi";
export declare type Server = {
    url: string;
    description?: string;
};
export declare type Servers = Server[];
export declare type Method = "put" | "get" | "post" | "delete" | "patch";
export declare type Tags = string[];
export declare type Body = {
    description: string;
    schema?: SchemaTypes;
    content: {
        [mimetype: string]: {
            schema?: SchemaTypeObject;
        };
    };
    required?: boolean;
};
export declare type Responses = {
    [statusCode: number]: Body;
};
export declare type EnumArray = {
    type: "array";
    items: {
        type: "string";
        default?: string;
        enum: string[];
    };
};
export declare enum ParameterIn {
    Query = "query",
    Path = "path",
    Header = "header",
    Cookie = "cookie",
    Body = "requestBody"
}
export declare enum StringFormats {
    DateTime = "date-time",
    Date = "date",
    Byte = "byte",
    Binary = "binary",
    Email = "email",
    Password = "password",
    Uuid = "uuid",
    Uri = "uri",
    Hostname = "hostname",
    Ipv4 = "ipv4",
    Ipv6 = "ipv6"
}
export declare enum NumberFormats {
    Float = "float",
    Double = "double"
}
export declare enum IntegerFormats {
    Int32 = "int32",
    Int64 = "int64"
}
export declare type Scheme = {
    [k: string]: string[];
};
export declare type SecuritySchemeArray = Scheme[];
export declare type SchemaTypeString = {
    type: "string";
    format?: StringFormats;
    default?: string;
    nullable?: boolean;
    minLength?: number;
    maxLength?: number;
    description?: string;
};
export declare type SchemaTypeBoolean = {
    type: "boolean";
    default?: number;
    nullable?: boolean;
    description?: string;
};
export declare type SchemaTypeInteger = {
    type: "integer";
    format?: IntegerFormats;
    minimum?: number;
    maximum?: number;
    default?: number;
    nullable?: boolean;
    description?: string;
};
export declare type SchemaTypeNumber = {
    type: "number";
    format?: NumberFormats;
    minimum?: number;
    maximum?: number;
    default?: number;
    nullable?: boolean;
    description?: string;
};
export declare type TypedArray = {
    type: "array";
    items?: SchemaTypes;
    default?: string[] | number[];
    example?: string[] | number[];
    nullable?: boolean;
    $ref?: string;
    description: string;
    additionalProperties?: {
        $ref?: string;
    };
};
export declare type TypedObject = {
    type: "object";
    properties: {
        [k: string]: SchemaTypes;
    };
    default?: string;
    nullable?: boolean;
    $ref?: string;
    description: string;
    additionalProperties?: {
        $ref?: string;
    };
    example?: any;
};
export declare type SchemaTypeObject = TypedObject | TypedArray | ReferencedObject;
export declare type SchemaTypes = SchemaTypeString | SchemaTypeInteger | SchemaTypeNumber | TypedArray | SchemaTypeBoolean | TypedObject | ReferencedObject;
export declare type TypedParameter = {
    name: string;
    in: ParameterIn;
    description: string;
    required: boolean;
    style?: "form";
    explode?: boolean;
    schema: SchemaTypes;
    example?: string | number | string[] | number[];
};
export declare type ReferencedParameter = {
    $ref: string;
    additionalProperties?: {
        $ref?: string;
    };
    example?: any;
};
export declare type ReferencedObject = ReferencedParameter;
export declare type Parameter = TypedParameter | ReferencedParameter;
export declare type Parameters = Parameter[];
export declare type PathDefinition = {
    tags: Tags;
    summary: string;
    description: string;
    operationId: string;
    security?: SecuritySchemeArray;
    parameters?: Parameters;
    requestBody?: Body;
    responses: Responses;
};
export declare type Path = {
    [K in Method]?: PathDefinition;
};
export declare type PathInputDefinition = {
    tags: Tags;
    summary: string;
    description: string;
    operationId: string;
    security?: SecuritySchemeArray;
    responses: Responses;
    requestSchema?: WebRequestSchema;
    deprecated?: boolean;
};
export declare type PathInput = {
    [K in Method]?: PathInputDefinition;
};
export declare type Paths = {
    [path: string]: Path;
};
export declare type SecurityBasicScheme = {
    type: "http";
    scheme: "basic";
};
export declare type SecurityApiKeySchemeMethod = "header" | "cookie" | "query";
export declare type SecurityApiKeyScheme = {
    type: "apiKey";
    in: SecurityApiKeySchemeMethod;
    name: string;
};
export declare type SecurityBearerScheme = {
    type: "http";
    scheme: "bearer";
    bearerFormat?: string;
};
export declare type SecurityOauth2Scopes = {
    [scopeName: string]: string;
};
export declare type FlowCommon = {
    scopes: SecurityOauth2Scopes;
};
export declare type AuthorizationCode = {
    authorizationUrl: string;
    tokenUrl: string;
    refreshUrl?: string;
} & FlowCommon;
export declare type Implicit = {
    authorizationUrl: string;
    refreshUrl?: string;
} & FlowCommon;
export declare type Password = {
    tokenUrl: string;
    refreshUrl?: string;
} & FlowCommon;
export declare type ClientCredentials = {
    tokenUrl: string;
    refreshUrl?: string;
} & FlowCommon;
export declare type SecurityOauth2Scheme = {
    type: "oauth2";
    description: string;
    flows: {
        authorizationCode?: AuthorizationCode;
        implicit?: Implicit;
        password?: Password;
        clientCredentials?: ClientCredentials;
    };
};
export declare type SecurityScheme = SecurityBasicScheme | SecurityApiKeyScheme | SecurityBearerScheme | SecurityOauth2Scheme;
export declare type OpenApiComponents = {
    schemas?: {
        [k: string]: SchemaTypes;
    };
    securitySchemes?: {
        [k: string]: SecurityScheme;
    };
    parameters?: {
        [k: string]: Parameter;
    };
};
export declare type OpenApiSchema = {
    info: {
        contact: {
            email: string;
        };
        description: string;
        license: {
            name: string;
            url: string;
        };
        termsOfService: string;
        title: string;
        version: string;
    };
    openapi: "3.0.3";
    paths: Paths;
    servers: Servers;
    components?: OpenApiComponents;
    security?: SecuritySchemeArray;
};
export declare type WebRequestSchema = {
    body?: Joi.ObjectSchema | Joi.ArraySchema;
    query?: Joi.SchemaMap<any>;
    params?: Joi.SchemaMap<any>;
    headers?: Joi.SchemaMap<any>;
    cookie?: Joi.SchemaMap<any>;
};
//# sourceMappingURL=openapi.types.d.ts.map