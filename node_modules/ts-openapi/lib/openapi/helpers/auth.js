"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
function basicAuth() {
    return {
        type: "http",
        scheme: "basic",
    };
}
exports.basicAuth = basicAuth;
function apiKeyAuth(name, method) {
    return {
        type: "apiKey",
        in: method,
        name: name,
    };
}
exports.apiKeyAuth = apiKeyAuth;
function cookieAuth(cookieName) {
    return {
        type: "apiKey",
        in: "cookie",
        name: cookieName,
    };
}
exports.cookieAuth = cookieAuth;
function bearerAuth(bearerFormat) {
    return __assign({ type: "http", scheme: "bearer" }, (bearerFormat && { bearerFormat: bearerFormat }));
}
exports.bearerAuth = bearerAuth;
function oauth2ImplicitAuth(description, authorizationUrl, scopes, refreshUrl) {
    return {
        type: "oauth2",
        description: description,
        flows: {
            implicit: {
                authorizationUrl: authorizationUrl,
                scopes: scopes,
                refreshUrl: refreshUrl,
            },
        },
    };
}
exports.oauth2ImplicitAuth = oauth2ImplicitAuth;
function oauth2AuthorizationCodeAuth(description, authorizationUrl, tokenUrl, scopes, refreshUrl) {
    return {
        type: "oauth2",
        description: description,
        flows: {
            authorizationCode: {
                authorizationUrl: authorizationUrl,
                tokenUrl: tokenUrl,
                scopes: scopes,
                refreshUrl: refreshUrl,
            },
        },
    };
}
exports.oauth2AuthorizationCodeAuth = oauth2AuthorizationCodeAuth;
function oauth2PasswordAuth(description, tokenUrl, scopes, refreshUrl) {
    return {
        type: "oauth2",
        description: description,
        flows: {
            password: {
                tokenUrl: tokenUrl,
                scopes: scopes,
                refreshUrl: refreshUrl,
            },
        },
    };
}
exports.oauth2PasswordAuth = oauth2PasswordAuth;
function oauth2ClientCredentialsAuth(description, tokenUrl, scopes, refreshUrl) {
    return {
        type: "oauth2",
        description: description,
        flows: {
            clientCredentials: {
                tokenUrl: tokenUrl,
                scopes: scopes,
                refreshUrl: refreshUrl,
            },
        },
    };
}
exports.oauth2ClientCredentialsAuth = oauth2ClientCredentialsAuth;
//# sourceMappingURL=auth.js.map