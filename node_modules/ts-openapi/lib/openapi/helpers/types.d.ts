import Joi from "joi";
declare type Common = {
    description?: string;
    required?: boolean;
    nullable?: boolean;
};
declare type ParameterCommon = {
    isParameter?: boolean;
};
declare type ObjectCommon = {
    modelName?: string;
};
declare type StringParameters = {
    default?: string;
    example?: string;
    minLength?: number;
    maxLength?: number;
} & Common & ParameterCommon;
declare type StringEnumParameters = {
    values: string[];
    default?: string;
    example?: string;
} & Common & ParameterCommon;
declare type PasswordParameters = {
    minLength?: number;
    maxLength?: number;
} & Common & ParameterCommon;
declare type UuidParameters = {
    example?: string;
} & Common & ParameterCommon;
declare type IpParameters = {
    example?: string;
} & Common & ParameterCommon;
declare type DateParameters = {
    default?: string;
    example?: string;
} & Common & ParameterCommon;
declare type IntegerParameters = {
    default?: number;
    example?: number;
    minValue?: number;
    maxValue?: number;
} & Common & ParameterCommon;
declare type IntegerEnumParameters = {
    values: any[];
    default?: number;
    example?: number;
} & Common & ParameterCommon;
declare type BooleanParameters = {
    default?: boolean;
    example?: boolean;
} & Common & ParameterCommon;
declare type ObjectParameters = {
    properties: Joi.SchemaMap<any>;
    default?: object;
    example?: object;
} & Common & ObjectCommon;
declare type ArrayParameters = {
    arrayType: Joi.SchemaLikeWithoutArray;
    default?: object;
    example?: object;
    minLength?: number;
    maxLength?: number;
} & Common & ParameterCommon & ObjectCommon;
export declare const Types: {
    String: (parameters?: StringParameters | undefined) => Joi.StringSchema;
    StringEnum: (parameters: StringEnumParameters) => Joi.StringSchema;
    Email: (parameters?: StringParameters | undefined) => Joi.StringSchema;
    Password: (parameters?: PasswordParameters | undefined) => Joi.StringSchema;
    Uuid: (parameters?: UuidParameters | undefined) => Joi.StringSchema;
    Uri: (parameters?: StringParameters | undefined) => Joi.StringSchema;
    Hostname: (parameters?: StringParameters | undefined) => Joi.StringSchema;
    Ipv4: (parameters?: IpParameters | undefined) => Joi.StringSchema;
    Ipv6: (parameters?: IpParameters | undefined) => Joi.StringSchema;
    Binary: (parameters?: StringParameters | undefined) => Joi.BinarySchema;
    Byte: (parameters?: StringParameters | undefined) => Joi.BinarySchema;
    DateTime: (parameters?: DateParameters | undefined) => Joi.StringSchema;
    Date: (parameters?: DateParameters | undefined) => Joi.StringSchema;
    Number: (parameters?: IntegerParameters | undefined) => Joi.NumberSchema;
    NumberEnum: (parameters: IntegerEnumParameters) => Joi.NumberSchema;
    Integer: (parameters?: IntegerParameters | undefined) => Joi.NumberSchema;
    IntegerEnum: (parameters: IntegerEnumParameters) => Joi.NumberSchema;
    Boolean: (parameters?: BooleanParameters | undefined) => Joi.BooleanSchema;
    Object: (parameters: ObjectParameters) => Joi.ObjectSchema<any>;
    Array: (parameters: ArrayParameters) => Joi.ArraySchema;
};
export {};
//# sourceMappingURL=types.d.ts.map