"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var joi_1 = __importDefault(require("joi"));
exports.Types = {
    String: function (parameters) {
        var joiType = joi_1.default.string();
        if (parameters) {
            var description = parameters.description, required = parameters.required, nullable = parameters.nullable, maxLength = parameters.maxLength, minLength = parameters.minLength, example = parameters.example;
            if (description) {
                joiType = joiType.description(description);
            }
            if (typeof required === "boolean") {
                joiType = required ? joiType.required() : joiType.optional();
            }
            if (typeof nullable === "boolean" && nullable) {
                joiType = joiType.allow(null);
            }
            if (minLength) {
                joiType = joiType.min(minLength);
            }
            if (maxLength) {
                joiType = joiType.max(maxLength);
            }
            if (parameters.default) {
                joiType = joiType.default(parameters.default);
            }
            if (parameters.example) {
                joiType = joiType.example(example);
            }
            if (parameters.isParameter) {
                joiType = joiType.meta({ parameter: true });
            }
        }
        return joiType;
    },
    StringEnum: function (parameters) {
        var _a;
        return (_a = exports.Types.String(parameters)).valid.apply(_a, parameters.values);
    },
    Email: function (parameters) {
        return exports.Types.String(parameters).email();
    },
    Password: function (parameters) {
        return exports.Types.String(parameters).meta({ format: "password" });
    },
    Uuid: function (parameters) {
        return exports.Types.String(parameters)
            .uuid({ version: "uuidv4" })
            .meta({ format: "uuid" })
            .min(36)
            .max(36);
    },
    Uri: function (parameters) {
        return exports.Types.String(parameters)
            .uri()
            .meta({ format: "uri" });
    },
    Hostname: function (parameters) {
        return exports.Types.String(parameters)
            .hostname()
            .meta({ format: "hostname" });
    },
    Ipv4: function (parameters) {
        return exports.Types.String(parameters)
            .ip({ version: ["ipv4"] })
            .meta({ format: "ipv4" })
            .min(7)
            .max(15);
    },
    Ipv6: function (parameters) {
        return exports.Types.String(parameters)
            .ip({ version: ["ipv6"] })
            .meta({ format: "ipv6" })
            .min(3)
            .max(45);
    },
    Binary: function (parameters) {
        var joiType = joi_1.default.binary();
        if (parameters) {
            var description = parameters.description, required = parameters.required, nullable = parameters.nullable, maxLength = parameters.maxLength, minLength = parameters.minLength, example = parameters.example;
            if (description) {
                joiType = joiType.description(description);
            }
            if (typeof required === "boolean") {
                joiType = required ? joiType.required() : joiType.optional();
            }
            if (typeof nullable === "boolean" && nullable) {
                joiType = joiType.allow(null);
            }
            if (minLength) {
                joiType = joiType.min(minLength);
            }
            if (maxLength) {
                joiType = joiType.max(maxLength);
            }
            if (parameters.default) {
                joiType = joiType.default(parameters.default);
            }
            if (parameters.example) {
                joiType = joiType.example(example);
            }
            if (parameters.isParameter) {
                joiType = joiType.meta({ parameter: true });
            }
        }
        return joiType;
    },
    Byte: function (parameters) {
        return exports.Types.Binary(parameters).encoding("base64");
    },
    DateTime: function (parameters) {
        var joiType = joi_1.default.string()
            .isoDate()
            .max(25);
        if (parameters) {
            var description = parameters.description, required = parameters.required, nullable = parameters.nullable;
            if (description) {
                joiType = joiType.description(description);
            }
            if (typeof required === "boolean") {
                joiType = required ? joiType.required() : joiType.optional();
            }
            if (typeof nullable === "boolean" && nullable) {
                joiType = joiType.allow(null);
            }
            if (parameters.isParameter) {
                joiType = joiType.meta({ parameter: true });
            }
        }
        return joiType;
    },
    Date: function (parameters) {
        return exports.Types.DateTime(parameters)
            .meta({ format: "date" })
            .min(10)
            .max(25);
    },
    Number: function (parameters) {
        var joiType = joi_1.default.number();
        if (parameters) {
            var description = parameters.description, required = parameters.required, nullable = parameters.nullable, minValue = parameters.minValue, maxValue = parameters.maxValue, example = parameters.example;
            if (description) {
                joiType = joiType.description(description);
            }
            if (typeof required === "boolean" && required) {
                joiType = joiType.required();
            }
            if (typeof nullable === "boolean" && nullable) {
                joiType = joiType.allow(null);
            }
            if (typeof minValue === "number") {
                joiType = joiType.min(minValue);
            }
            if (typeof maxValue === "number") {
                joiType = joiType.max(maxValue);
            }
            if (typeof parameters.default === "number") {
                joiType = joiType.default(parameters.default);
            }
            if (typeof parameters.example === "number") {
                joiType = joiType.example(example);
            }
            if (parameters.isParameter) {
                joiType = joiType.meta({ parameter: true });
            }
        }
        return joiType;
    },
    NumberEnum: function (parameters) {
        var _a;
        return (_a = exports.Types.Number(parameters)).valid.apply(_a, parameters.values);
    },
    Integer: function (parameters) {
        return exports.Types.Number(parameters).integer();
    },
    IntegerEnum: function (parameters) {
        var _a;
        return (_a = exports.Types.Integer(parameters)).valid.apply(_a, parameters.values);
    },
    Boolean: function (parameters) {
        var joiType = joi_1.default.boolean().strict();
        if (parameters) {
            var description = parameters.description, required = parameters.required, nullable = parameters.nullable, example = parameters.example;
            if (description) {
                joiType = joiType.description(description);
            }
            if (typeof required === "boolean") {
                joiType = required ? joiType.required() : joiType.optional();
            }
            if (typeof nullable === "boolean" && nullable) {
                joiType = joiType.allow(null);
            }
            if (typeof parameters.default === "boolean") {
                joiType = joiType.default(parameters.default);
            }
            if (typeof parameters.example === "boolean") {
                joiType = joiType.example(example);
            }
            if (parameters.isParameter) {
                joiType = joiType.meta({ parameter: true });
            }
        }
        return joiType;
    },
    Object: function (parameters) {
        var properties = parameters.properties, description = parameters.description, required = parameters.required, nullable = parameters.nullable, example = parameters.example;
        var joiType = joi_1.default.object().keys(properties);
        if (description) {
            joiType = joiType.description(description);
        }
        if (typeof required === "boolean") {
            joiType = required ? joiType.required() : joiType.optional();
        }
        if (nullable) {
            joiType = joiType.allow(null);
        }
        if (parameters.default) {
            joiType = joiType.default(parameters.default);
        }
        if (parameters.example) {
            joiType = joiType.example(example);
        }
        if (parameters.modelName) {
            joiType = joiType.meta({ modelName: parameters.modelName });
        }
        return joiType;
    },
    Array: function (parameters) {
        var arrayType = parameters.arrayType, description = parameters.description, required = parameters.required, nullable = parameters.nullable, example = parameters.example, minLength = parameters.minLength, maxLength = parameters.maxLength, modelName = parameters.modelName, isParameter = parameters.isParameter;
        var joiType = joi_1.default.array().items(arrayType);
        if (description) {
            joiType = joiType.description(description);
        }
        if (typeof required === "boolean") {
            joiType = required ? joiType.required() : joiType.optional();
        }
        if (nullable) {
            joiType = joiType.allow(null);
        }
        if (parameters.default) {
            joiType = joiType.default(parameters.default);
        }
        if (parameters.example) {
            joiType = joiType.example(example);
        }
        if (minLength) {
            joiType = joiType.min(minLength);
        }
        if (maxLength) {
            joiType = joiType.max(maxLength);
        }
        if (isParameter) {
            joiType = joiType.meta({ parameter: true });
        }
        if (modelName) {
            joiType = joiType.meta({ modelName: modelName });
        }
        return joiType;
    }
};
//# sourceMappingURL=types.js.map