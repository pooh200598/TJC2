"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var joi_1 = __importDefault(require("joi"));
var application_error_1 = require("../errors/application-error");
var joi_conversion_1 = __importDefault(require("../joi-conversion"));
var openapi_functions_1 = require("./openapi-functions");
var openapi_validation_1 = require("./openapi-validation");
var openapi_types_1 = require("./openapi.types");
// tslint:disable:no-var-requires
var hasher = require("node-object-hash")();
// tslint:enable:no-var-requires
var REQUIRED_TYPES = [openapi_types_1.ParameterIn.Path];
var OpenApi = /** @class */ (function () {
    function OpenApi(version, title, description, email) {
        this.operationIds = [];
        this.declaredParameters = new Map();
        this.declaredModels = new Map();
        this.securitySchemeIds = [];
        this.schema = {
            info: {
                contact: {
                    email: email
                },
                description: description,
                license: {
                    name: "Apache 2.0",
                    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
                },
                termsOfService: "http://swagger.io/terms/",
                title: title,
                version: version
            },
            openapi: "3.0.3",
            paths: {},
            servers: []
        };
    }
    OpenApi.prototype.setServers = function (servers) {
        this.schema.servers = servers;
    };
    OpenApi.prototype.declareSecurityScheme = function (name, scheme) {
        if (this.securitySchemeIds.includes(name)) {
            throw new Error("Security scheme name already exists.");
        }
        if (!this.schema.components || !this.schema.components.securitySchemes) {
            this.schema.components = {};
            this.schema.components.securitySchemes = {};
        }
        // add new securityScheme by name
        this.schema.components.securitySchemes[name] = scheme;
        // add new id
        this.securitySchemeIds.push(name);
    };
    OpenApi.prototype.addGlobalSecurityScheme = function (name, scopes) {
        var _a;
        if (!this.securitySchemeIds.includes(name)) {
            throw new Error("Unknown security scheme '" + name + "'");
        }
        if (!this.schema.security) {
            this.schema.security = [];
        }
        this.schema.security.push((_a = {}, _a[name] = scopes || [], _a));
        this.securitySchemeIds.push(name);
    };
    /**
     * this replaces path parameters from express to openapi format
     * @param apiPath
     */
    OpenApi.prototype.replaceParameters = function (apiPath) {
        var newPath = apiPath;
        var paramsRegex = apiPath.match(/:([A-Za-z0-9_]+)/g);
        var checkParams = [];
        if (paramsRegex) {
            for (var _i = 0, paramsRegex_1 = paramsRegex; _i < paramsRegex_1.length; _i++) {
                var param = paramsRegex_1[_i];
                newPath = newPath.replace(param, "{" + param.substring(1) + "}");
                checkParams.push(param.substring(1));
            }
        }
        return { newPath: newPath, checkParams: checkParams };
    };
    OpenApi.prototype.addPath = function (path, inputDefinition, visible) {
        var _a, _b;
        if (!visible) {
            return;
        }
        var _c = this.replaceParameters(path), newPath = _c.newPath, checkParams = _c.checkParams;
        path = newPath;
        var methods = [];
        Object.getOwnPropertyNames(inputDefinition).forEach(function (method) {
            methods.push([
                method,
                inputDefinition[method]
            ]);
        });
        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
            var _d = methods_1[_i], method = _d[0], pathDefinition = _d[1];
            var operationId = pathDefinition.operationId;
            var responses = pathDefinition.responses;
            var requestSchema = pathDefinition.requestSchema, remainder = __rest(pathDefinition, ["requestSchema"]);
            var _e = this.parametersAndBodyFromSchema(pathDefinition.requestSchema || {}), parameters = _e.parameters, requestBody = _e.requestBody;
            var definition = __assign(__assign(__assign({}, remainder), (parameters && { parameters: parameters })), (requestBody && { requestBody: requestBody }));
            this.checkParameters(checkParams, definition);
            if (method === "get" && definition.requestBody) {
                throw new Error("GET operations cannot have a requestBody.");
            }
            if (Object.getOwnPropertyNames(responses).length === 0) {
                throw new Error("Should define at least one response.");
            }
            if (pathDefinition.security) {
                this.checkSecurityDefinition(pathDefinition.security);
            }
            if (!operationId) {
                throw new Error("No operationId supplied.");
            }
            if (this.operationIds.includes(operationId)) {
                throw new Error("Operations must have unique operationIds, id '" + operationId + "' already exists.");
            }
            this.operationIds.push(operationId);
            if (this.schema.paths[path]) {
                // add a secondary method on path
                this.schema.paths[path] = __assign((_a = {}, _a[method] = definition, _a), this.schema.paths[path]);
            }
            else {
                // add first method in this path
                this.schema.paths[path] = (_b = {}, _b[method] = definition, _b);
            }
        }
    };
    OpenApi.prototype.objectSchema = function (parameter) {
        var description = (parameter.description || "Parameter without description.") +
            (openapi_functions_1.limitations(parameter) || "");
        var output = __assign(__assign(__assign(__assign(__assign(__assign({ description: description }, (typeof parameter.default === "object" && {
            default: parameter.default
        })), (parameter.minItems && { minItems: parameter.minItems })), (parameter.maxItems && { maxItems: parameter.maxItems })), (typeof parameter.nullable === "boolean" && {
            nullable: parameter.nullable
        })), (parameter.meta.modelName &&
            parameter.example && { example: parameter.example })), { type: "object", properties: {} });
        for (var _i = 0, _a = Object.keys(parameter.properties); _i < _a.length; _i++) {
            var propertyKey = _a[_i];
            var property = parameter.properties[propertyKey];
            switch (property.type) {
                case "string":
                    var _b = openapi_functions_1.stringSchema(property), ignoreA1 = _b.default, ignoreA2 = _b.nullable, minLength = _b.minLength, maxLength = _b.maxLength, restOfStringSchema = __rest(_b, ["default", "nullable", "minLength", "maxLength"]);
                    output.properties[propertyKey] = restOfStringSchema;
                    break;
                case "number":
                    var _c = openapi_functions_1.numberSchema(property), ignoreB1 = _c.default, ignoreB2 = _c.nullable, ignoreB3 = _c.minimum, ignoreB4 = _c.maximum, restNumberOfSchema = __rest(_c, ["default", "nullable", "minimum", "maximum"]);
                    output.properties[propertyKey] = restNumberOfSchema;
                    break;
                case "boolean":
                    var _d = openapi_functions_1.booleanSchema(property), ignoreE1 = _d.default, ignorE2 = _d.nullable, restBooleanOfSchema = __rest(_d, ["default", "nullable"]);
                    output.properties[propertyKey] = restBooleanOfSchema;
                    break;
                case "integer":
                    var _e = openapi_functions_1.integerSchema(property), ignoreC1 = _e.default, ignoreC2 = _e.nullable, ignoreC3 = _e.minimum, ignoreC4 = _e.maximum, restIntegerOfSchema = __rest(_e, ["default", "nullable", "minimum", "maximum"]);
                    output.properties[propertyKey] = restIntegerOfSchema;
                    break;
                case "object":
                    var objSchema = this.objectSchema(property);
                    if (!objSchema.$ref) {
                        // typedobject
                        var _f = objSchema, ignoreD1 = _f.default, ignoreD2 = _f.nullable, restOfObjectSchema = __rest(_f, ["default", "nullable"]);
                        output.properties[propertyKey] = restOfObjectSchema;
                    }
                    // referenced object
                    output.properties[propertyKey] = objSchema;
                    break;
                case "array":
                    var arraySchema = this.arraySchema(property);
                    if (!arraySchema.$ref) {
                        // typedarray
                        var _g = arraySchema, ignoreF1 = _g.default, ignoreF2 = _g.nullable, restOfArraySchema = __rest(_g, ["default", "nullable"]);
                        output.properties[propertyKey] = restOfArraySchema;
                        break;
                    }
                    // referenced array
                    output.properties[propertyKey] = arraySchema;
                    break;
                default:
                    throw new Error(property.type + " not implemented");
            }
        }
        if (parameter.meta.modelName) {
            var reference = this.checkAndSetModel(parameter.meta.modelName, output);
            return { $ref: reference };
        }
        return output;
    };
    OpenApi.prototype.arraySchema = function (parameter) {
        var description = (parameter.description || "Parameter without description.") +
            (openapi_functions_1.limitations(parameter) || "");
        var output = __assign(__assign(__assign(__assign(__assign({ description: description }, (typeof parameter.default === "object" && {
            default: parameter.default
        })), (parameter.minItems && { minItems: parameter.minItems })), (parameter.maxItems && { maxItems: parameter.maxItems })), (typeof parameter.nullable === "boolean" && {
            nullable: parameter.nullable
        })), { type: "array" });
        switch (parameter.items.type) {
            case "string":
                var _a = openapi_functions_1.stringSchema(parameter.items), ignoreA1 = _a.default, ignoreA2 = _a.nullable, minLength = _a.minLength, maxLength = _a.maxLength, restOfStringSchema = __rest(_a, ["default", "nullable", "minLength", "maxLength"]);
                output.items = restOfStringSchema;
                break;
            case "number":
                var _b = openapi_functions_1.numberSchema(parameter.items), ignoreB1 = _b.default, ignoreB2 = _b.nullable, ignoreB3 = _b.minimum, ignoreB4 = _b.maximum, restNumberOfSchema = __rest(_b, ["default", "nullable", "minimum", "maximum"]);
                output.items = restNumberOfSchema;
                break;
            case "integer":
                var _c = openapi_functions_1.integerSchema(parameter.items), ignoreC1 = _c.default, ignoreC2 = _c.nullable, ignoreC3 = _c.minimum, ignoreC4 = _c.maximum, restIntegerOfSchema = __rest(_c, ["default", "nullable", "minimum", "maximum"]);
                output.items = restIntegerOfSchema;
                break;
            case "object":
                var objSchema = this.objectSchema(parameter.items);
                if (!objSchema.$ref) {
                    // typedobject
                    var _d = objSchema, ignoreD1 = _d.default, ignoreD2 = _d.nullable, restOfObjectSchema = __rest(_d, ["default", "nullable"]);
                    output.items = restOfObjectSchema;
                }
                // referenced object
                output.items = objSchema;
                break;
            case "array":
                var arrSchema = this.arraySchema(parameter.items);
                if (!arrSchema.$ref) {
                    // TypedArray
                    var _e = arrSchema, ignoreE1 = _e.default, ignoreE2 = _e.nullable, ignoreE3 = _e.example, restOfArraySchema = __rest(_e, ["default", "nullable", "example"]);
                    output.items = restOfArraySchema;
                }
                // referenced object
                output.items = arrSchema;
                break;
            default:
                throw new Error("not implemented");
        }
        if (parameter.items.enum instanceof Array) {
            // default values must be part of enum
            if (output.default instanceof Array &&
                !output.default.every(function (element, _index, _array) {
                    return parameter.items.enum.includes(element);
                })) {
                delete output.default;
            }
            // string enums are already limited
            if (parameter.items.type === "string") {
                delete output.items.minLength;
                delete output.items.maxLength;
            }
        }
        if (parameter.meta.modelName) {
            var reference = this.checkAndSetModel(parameter.meta.modelName, output);
            return { $ref: reference };
        }
        return output;
    };
    OpenApi.prototype.checkSecurityDefinition = function (security) {
        var _this = this;
        security.forEach(function (securityScheme) {
            var securitySchemeName = Object.getOwnPropertyNames(securityScheme)[0];
            if (!_this.securitySchemeIds.includes(securitySchemeName)) {
                throw new Error("Unknown security scheme '" + securitySchemeName + "'");
            }
            // check security scheme scopes exist
            var scopes = securityScheme[securitySchemeName];
            var schemeDefinition = _this.schema.components
                .securitySchemes[securitySchemeName];
            if (scopes.length) {
                if (schemeDefinition.type !== "oauth2") {
                    throw new Error("Security scheme '" + securitySchemeName + "' does not have scopes");
                }
                scopes.forEach(function (scope) {
                    var flowName = Object.getOwnPropertyNames(schemeDefinition.flows)[0];
                    if (![
                        "authorizationCode",
                        "implicit",
                        "password",
                        "clientCredentials"
                    ].includes(flowName)) {
                        throw new Error(flowName + " is not a valid flow for " + securitySchemeName // TEST
                        );
                    }
                    var flow = schemeDefinition.flows[flowName];
                    var scopeNames = Object.getOwnPropertyNames(flow.scopes);
                    if (!scopeNames.includes(scope)) {
                        throw new Error("Security scope '" + scope + "' does not have exist in " + securitySchemeName + " flow '" + flowName + "' declaration.");
                    }
                });
            }
        });
    };
    OpenApi.prototype.checkParameters = function (checkParams, definition) {
        var _this = this;
        var _a;
        if (checkParams.length) {
            if (!((_a = definition.parameters) === null || _a === void 0 ? void 0 : _a.length)) {
                throw new Error("Parameters in path must be declared"); // TEST
            }
            checkParams.forEach(function (paramCheck) {
                var _a;
                var found = false;
                (_a = definition.parameters) === null || _a === void 0 ? void 0 : _a.forEach(function (detectedParam) {
                    if (detectedParam.$ref &&
                        detectedParam.$ref.startsWith("#/components/parameters/") &&
                        _this.schema.components &&
                        _this.schema.components.parameters) {
                        // fetch declaration for check
                        detectedParam = _this.schema.components.parameters[detectedParam.$ref.substring(24)];
                    }
                    if (detectedParam.in === openapi_types_1.ParameterIn.Path &&
                        detectedParam.name === paramCheck) {
                        found = true;
                    }
                });
                if (!found) {
                    throw new Error("Parameters in path must be declared, missing " + paramCheck);
                }
            });
        }
    };
    OpenApi.prototype.setLicense = function (name, url, termsOfService) {
        this.schema.info.license.name = name;
        this.schema.info.license.url = url;
        this.schema.info.termsOfService = termsOfService;
    };
    OpenApi.prototype.parametersAndBodyFromSchema = function (requestSchema) {
        var parameters = [];
        if (requestSchema.query) {
            // get parameters
            this.genericParams(parameters, joi_1.default.object().keys(requestSchema.query), openapi_types_1.ParameterIn.Query);
        }
        if (requestSchema.params) {
            // uri params
            this.genericParams(parameters, joi_1.default.object(requestSchema.params), openapi_types_1.ParameterIn.Path);
        }
        if (requestSchema.cookie) {
            // cookie params
            this.genericParams(parameters, joi_1.default.object(requestSchema.cookie), openapi_types_1.ParameterIn.Cookie);
        }
        if (requestSchema.headers) {
            // header params
            this.genericParams(parameters, joi_1.default.object(requestSchema.headers), openapi_types_1.ParameterIn.Header);
        }
        if (requestSchema.body) {
            var _a = this.bodyParams(requestSchema.body), description = _a.description, schema = _a.schema, example = _a.example, modelName = _a.modelName;
            if (modelName && !schema.$ref) {
                // TEST
                var reference = this.checkAndSetModel(modelName, schema);
                return {
                    parameters: parameters.length > 0 ? parameters : undefined,
                    requestBody: {
                        description: description,
                        content: {
                            "application/json": __assign({ schema: { $ref: reference } }, (example && { example: example }))
                        }
                    }
                };
            }
            return {
                parameters: parameters.length > 0 ? parameters : undefined,
                requestBody: {
                    description: description,
                    content: {
                        "application/json": __assign({ schema: schema }, (example && { example: example }))
                    }
                }
            };
        }
        return {
            parameters: parameters.length > 0 ? parameters : undefined,
            requestBody: undefined
        };
    };
    OpenApi.prototype.checkAndSetModel = function (modelName, schema) {
        var schemaHash = hasher.hash(schema);
        var escapedName = openapi_functions_1.openapiEscapeChars(modelName);
        var reference = "#/components/schemas/" + escapedName;
        if (this.declaredModels.has(escapedName)) {
            // check if model definition is different
            if (schemaHash !== this.declaredModels.get(modelName)) {
                throw new Error(// TEST
                "There is a conflicting declaration of model " + modelName + ", model cannot change.");
            }
        }
        else {
            // init object
            if (!this.schema.components) {
                this.schema.components = {};
            }
            if (!this.schema.components.schemas) {
                this.schema.components.schemas = {};
            }
        }
        this.schema.components.schemas[escapedName] = schema;
        this.declaredModels.set(escapedName, schemaHash);
        return reference;
    };
    OpenApi.prototype.genericParams = function (parameters, schema, type) {
        var query = joi_conversion_1.default(schema, {});
        for (var _i = 0, _a = Object.keys(query.swagger.properties); _i < _a.length; _i++) {
            var key = _a[_i];
            var parameter = query.swagger.properties[key];
            var isParameterRequired = this.isRequiredProperty(query.swagger, key);
            // specific parameter context validation
            openapi_validation_1.validateParameters(type, parameter, key, parameter.type, isParameterRequired);
            switch (parameter.type) {
                case "string":
                    {
                        var preparedParameter = this.stringParameter(key, parameter, isParameterRequired, type);
                        this.declareParameter(parameter, parameters, key, preparedParameter);
                    }
                    break;
                case "number":
                case "integer":
                    if (parameter.format && parameter.format === "float") {
                        var preparedParameter = this.numberParameter(key, parameter, isParameterRequired, type);
                        this.declareParameter(parameter, parameters, key, preparedParameter);
                    }
                    else {
                        var preparedParameter = this.integerParameter(key, parameter, isParameterRequired, type);
                        this.declareParameter(parameter, parameters, key, preparedParameter);
                    }
                    break;
                case "boolean":
                    {
                        var preparedParameter = this.booleanParameter(key, parameter, isParameterRequired, type);
                        this.declareParameter(parameter, parameters, key, preparedParameter);
                    }
                    break;
                case "array":
                    {
                        var preparedParameter = this.arrayParameter(key, parameter, isParameterRequired, type);
                        this.declareParameter(parameter, parameters, key, preparedParameter);
                    }
                    break;
                default:
                    throw new Error("Unknown type '" + parameter.type + "' in openapi");
            }
        }
    };
    OpenApi.prototype.declareParameter = function (parameter, parameters, key, preparedParameter) {
        if (parameter.meta.parameter) {
            var reference = this.checkAndSetParameter(key, preparedParameter);
            parameters.push(this.referencedParameter(reference));
        }
        else {
            parameters.push(preparedParameter);
        }
    };
    OpenApi.prototype.checkAndSetSchema = function (key, schema) {
        this.checkAndSetModel(key, schema);
    };
    OpenApi.prototype.checkAndSetParameter = function (key, preparedParameter) {
        var _a;
        var escapedKey = openapi_functions_1.openapiEscapeChars(key);
        var reference = "#/components/parameters/" + escapedKey;
        var parameterHash = hasher.hash(preparedParameter);
        if (!this.declaredParameters.get(key)) {
            // new parameter
            this.declaredParameters.set(key, parameterHash);
            // store declared component
            if (!this.schema.components) {
                this.schema.components = {};
            }
            if (!this.schema.components.parameters) {
                this.schema.components.parameters = (_a = {},
                    _a[key] = preparedParameter,
                    _a);
            }
            this.schema.components.parameters[escapedKey] = preparedParameter;
        }
        else {
            // check if parameter is different
            if (parameterHash !== this.declaredParameters.get(key)) {
                throw new Error("There is a conflicting declaration of " + key + " parameter, the parameter cannot change.");
            }
        }
        return reference;
    };
    OpenApi.prototype.isRequiredProperty = function (swagger, key) {
        return swagger.required && swagger.required.includes(key);
    };
    OpenApi.prototype.generateJson = function () {
        if (this.schema.servers.length === 0) {
            throw new application_error_1.ApplicationError(500, "No servers were added to OpenApi definition");
        }
        if (Object.getOwnPropertyNames(this.schema.paths).length === 0) {
            throw new application_error_1.ApplicationError(500, "No paths were added to OpenApi definition.");
        }
        return this.schema;
    };
    OpenApi.prototype.stringParameter = function (name, parameter, required, type) {
        var limitationDetail = openapi_functions_1.limitations(parameter);
        var p = __assign({ description: (parameter.description || "Parameter without description.") +
                (limitationDetail || ""), in: type, name: name, required: isRequiredParameter(required, type), schema: openapi_functions_1.stringSchema(parameter) }, (parameter.example && { example: parameter.example }));
        return p;
    };
    OpenApi.prototype.referencedParameter = function (reference) {
        return { $ref: reference };
    };
    OpenApi.prototype.numberParameter = function (name, parameter, required, type) {
        var limitationDetail = openapi_functions_1.limitations(parameter);
        var p = __assign({ description: (parameter.description || "Parameter without description.") +
                (limitationDetail || ""), in: type, name: name, required: isRequiredParameter(required, type), schema: openapi_functions_1.numberSchema(parameter) }, (parameter.example && { example: parameter.example }));
        return p;
    };
    OpenApi.prototype.integerParameter = function (name, parameter, required, type) {
        var limitationDetail = openapi_functions_1.limitations(parameter);
        var p = __assign({ description: (parameter.description || "Parameter without description.") +
                (limitationDetail || ""), in: type, name: name, required: isRequiredParameter(required, type), schema: openapi_functions_1.integerSchema(parameter) }, (parameter.example && { example: parameter.example }));
        return p;
    };
    OpenApi.prototype.booleanParameter = function (name, parameter, required, type) {
        var limitationDetail = openapi_functions_1.limitations(parameter);
        var p = __assign({ description: (parameter.description || "Parameter without description.") +
                (limitationDetail || ""), in: type, name: name, required: isRequiredParameter(required, type), schema: openapi_functions_1.booleanSchema(parameter) }, (typeof parameter.example === "boolean" && {
            example: parameter.example
        }));
        return p;
    };
    OpenApi.prototype.arrayParameter = function (name, parameter, required, type) {
        var limitationDetail = openapi_functions_1.limitations(parameter);
        var schema = this.arraySchema(parameter);
        var p = __assign({ description: (parameter.description || "Parameter without description.") +
                (limitationDetail || ""), in: type, name: name, required: isRequiredParameter(required, type), schema: schema }, (parameter.example && { example: parameter.example }));
        return p;
    };
    OpenApi.prototype.declareSchema = function (description, outerSchema) {
        var _a = this.bodyParams(outerSchema), schema = _a.schema, example = _a.example, modelName = _a.modelName;
        return {
            description: description,
            content: {
                "application/json": {
                    schema: __assign(__assign({}, schema), (example && !modelName && { example: example }))
                }
            }
        };
    };
    OpenApi.prototype.bodyParams = function (schema) {
        var internalSchema = joi_1.default.object().keys({ object: schema.required() });
        var query = joi_conversion_1.default(internalSchema, {});
        var key = Object.keys(query.swagger.properties)[0];
        var parameter = query.swagger.properties[key];
        switch (query.swagger.properties[key].type) {
            case "object":
                return __assign(__assign({ description: query.swagger.properties[key].description ||
                        "Body does not have a description.", schema: this.objectSchema(parameter) }, (parameter.example && { example: parameter.example })), { modelName: parameter.meta.modelName });
            case "array":
                return __assign(__assign({ description: query.swagger.properties[key].description ||
                        "Body does not have a description.", schema: this.arraySchema(parameter) }, (parameter.example && { example: parameter.example })), { modelName: parameter.meta.modelName });
            default:
                throw new Error("Body definition can only be an object or array");
        }
    };
    return OpenApi;
}());
exports.OpenApi = OpenApi;
// all required parameters or path parameters are parameters are required
function isRequiredParameter(required, type) {
    return required || REQUIRED_TYPES.includes(type);
}
//# sourceMappingURL=openapi.js.map