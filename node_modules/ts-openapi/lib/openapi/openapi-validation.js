"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var openapi_types_1 = require("./openapi.types");
function validateParameters(type, parameter, name, parameterType, isParameterRequired) {
    switch (type) {
        case openapi_types_1.ParameterIn.Path:
            validatePathParameters(name, parameterType, isParameterRequired);
            break;
        case openapi_types_1.ParameterIn.Query:
            validateQueryParameters(parameter, name, parameterType, isParameterRequired);
            break;
        case openapi_types_1.ParameterIn.Cookie:
        case openapi_types_1.ParameterIn.Header:
            var upcaseType = type.charAt(0).toUpperCase() + type.slice(1);
            validateCookieParameters(upcaseType, name, parameterType);
            break;
    }
}
exports.validateParameters = validateParameters;
function validatePathParameters(key, parameterType, isParameterRequired) {
    var nameMatch = key.match(/[A-Za-z0-9_]+/);
    if (nameMatch && nameMatch[0] !== key) {
        throw new Error("Path param '" + key + "' name does not match [A-Za-z0-9_]");
    }
    if (["object", "array"].includes(parameterType)) {
        throw new Error("Path param '" + key + "' cannot be an object or an array.");
    }
    if (!isParameterRequired) {
        throw new Error("Path param '" + key + "' must be required because it is a path parameter.");
    }
}
function validateQueryParameters(parameter, key, parameterType, _isParameterRequired) {
    if (["object"].includes(parameterType)) {
        throw new Error("Query param '" + key + "' cannot be an object.");
    }
    if (["array"].includes(parameterType)) {
        if (parameter.items.type === "object" || parameter.items.type === "array") {
            if (parameter.items.properties) {
                var arrayProperties = parameter.items.properties;
                for (var _i = 0, _a = Object.keys(arrayProperties); _i < _a.length; _i++) {
                    var propKey = _a[_i];
                    var property = arrayProperties[propKey];
                    if (property.type === "array") {
                        throw new Error("Query param '" + key + "' type array can only have scalar types inside of it (cannot be an array of arrays or an array of objects).");
                    }
                }
            }
            else {
                throw new Error("Query param type array can only have scalar types inside of it (cannot be an array of arrays or an array of objects).");
            }
        }
    }
}
function validateCookieParameters(type, key, parameterType) {
    if (["object", "array"].includes(parameterType)) {
        throw new Error(type + " param '" + key + "' cannot be an object or an array.");
    }
}
//# sourceMappingURL=openapi-validation.js.map