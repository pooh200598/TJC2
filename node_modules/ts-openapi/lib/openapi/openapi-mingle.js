"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var fs = __importStar(require("fs"));
var _ = __importStar(require("lodash"));
var __1 = require("..");
function getPropertyValues(object, prop) {
    return _.reduce(object, function (result, value, key) {
        if (key === prop) {
            result.push(value);
        }
        else if (_.isObjectLike(value)) {
            return result.concat(getPropertyValues(value, prop));
        }
        return result;
    }, []);
}
var OpenApiMingle = /** @class */ (function () {
    function OpenApiMingle(version, title, description, email, logFn) {
        this.declaredPaths = [];
        this.openApi = new __1.OpenApi(version, title, description, email);
        this.logFn = logFn;
    }
    OpenApiMingle.prototype.setServers = function (servers) {
        this.openApi.setServers(servers);
    };
    OpenApiMingle.prototype.setLicense = function (name, url, termsOfService) {
        this.openApi.setLicense(name, url, termsOfService);
    };
    OpenApiMingle.prototype.declareSecurityScheme = function (name, scheme) {
        this.openApi.declareSecurityScheme(name, scheme);
    };
    OpenApiMingle.prototype.addGlobalSecurityScheme = function (name, scopes) {
        this.openApi.addGlobalSecurityScheme(name, scopes);
    };
    OpenApiMingle.prototype.generateJson = function () {
        if (!this.json) {
            throw new Error("JSON schema is not yet generated, you need to call combineServices at least once.");
        }
        this.log("Successfully generated mingled schema.");
        return this.json;
    };
    OpenApiMingle.prototype.log = function (message, e) {
        if (this.logFn) {
            this.logFn(message, e);
        }
    };
    OpenApiMingle.prototype.combineServices = function (serviceList) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceNames, _loop_1, this_1, _i, serviceNames_1, serviceName;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serviceNames = Object.getOwnPropertyNames(serviceList);
                        this.log("***** Started at " + new Date().toISOString() + "' *****");
                        _loop_1 = function (serviceName) {
                            var serviceDefinition, openApiDefinition, filteredPaths_1, paths;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        serviceDefinition = serviceList[serviceName];
                                        return [4 /*yield*/, this_1.readDefinition(serviceName, serviceDefinition)];
                                    case 1:
                                        openApiDefinition = _a.sent();
                                        if (openApiDefinition) {
                                            this_1.checkOpenApiVersion(openApiDefinition.openapi);
                                            filteredPaths_1 = this_1.filterPaths(openApiDefinition.paths, serviceDefinition);
                                            paths = Object.getOwnPropertyNames(filteredPaths_1);
                                            paths.forEach(function (path) {
                                                _this.log("\tAdding " + path);
                                                if (_this.declaredPaths.includes(path)) {
                                                    throw new Error("Path " + path + " was already declared.");
                                                }
                                                var addedPath = filteredPaths_1[path];
                                                // copy referenced schemas from #/components/schemas/*
                                                _this.copyReferenceSchemas(path, addedPath, openApiDefinition);
                                                // copy referenced parameters #/components/parameters/*
                                                _this.copyReferencedParameters(path, addedPath, openApiDefinition);
                                                _this.openApi.addPath(path, addedPath, true);
                                                _this.declaredPaths.push(path);
                                            });
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _i = 0, serviceNames_1 = serviceNames;
                        _a.label = 1;
                    case 1:
                        if (!(_i < serviceNames_1.length)) return [3 /*break*/, 4];
                        serviceName = serviceNames_1[_i];
                        return [5 /*yield**/, _loop_1(serviceName)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        this.log("***** Ended at " + new Date().toISOString() + "' *****");
                        this.json = this.openApi.generateJson();
                        return [2 /*return*/];
                }
            });
        });
    };
    OpenApiMingle.prototype.copyReferenceSchemas = function (path, addedPath, openApiDefinition) {
        var _a;
        for (var _i = 0, _b = Object.getOwnPropertyNames(addedPath); _i < _b.length; _i++) {
            var verb = _b[_i];
            var verbInfo = addedPath[verb];
            var responseIsJson = (_a = verbInfo.requestBody) === null || _a === void 0 ? void 0 : _a.content["application/json"];
            // copy body schemas
            if (responseIsJson) {
                this.checkSchema(path, verb, openApiDefinition, responseIsJson);
            }
            // copy referenced responses
            for (var _c = 0, _d = Object.getOwnPropertyNames(verbInfo.responses); _c < _d.length; _c++) {
                var responseCode = _d[_c];
                var response = verbInfo.responses[Number(responseCode)];
                var responseCodeIsJson = response === null || response === void 0 ? void 0 : response.content["application/json"];
                this.checkSchema(path, verb + " (" + responseCode + ")", openApiDefinition, responseCodeIsJson);
            }
        }
    };
    OpenApiMingle.prototype.checkSchema = function (path, verb, openApiDefinition, jsonSchema) {
        if (jsonSchema && jsonSchema.schema) {
            // this checks referenced schemas and inner referenced schemas
            if (jsonSchema.schema.$ref ||
                (jsonSchema.schema.additionalProperties &&
                    jsonSchema.schema.additionalProperties.$ref)) {
                var ref = (jsonSchema.schema.$ref ||
                    jsonSchema.schema.additionalProperties.$ref);
                this.log("\tChecking referenced schema " + ref + " at " + verb.toUpperCase() + " " + path);
                var preparedSchema = this.checkReference(ref, openApiDefinition);
                // check inner references
                this.checkInnerReferences(preparedSchema, openApiDefinition);
            }
            else {
                // this checks normal schemas with inner referenced schemas
                this.checkInnerReferences(jsonSchema.schema, openApiDefinition);
            }
        }
    };
    OpenApiMingle.prototype.checkInnerReferences = function (schema, openApiDefinition) {
        var innerReferences = getPropertyValues(schema, "$ref");
        while (innerReferences.length) {
            var innerRef = innerReferences.pop();
            var innerSchema = this.checkReference(innerRef, openApiDefinition);
            var innerSchemaRefs = getPropertyValues(innerSchema, "$ref");
            if (innerSchemaRefs.length) {
                innerReferences.push.apply(innerReferences, innerSchemaRefs);
            }
        }
    };
    OpenApiMingle.prototype.checkReference = function (ref, openApiDefinition) {
        var _a;
        if (!ref.startsWith("#/components/schemas/")) {
            throw new Error("Schema reference " + ref + " does not start with #/components/schemas/");
        }
        var key = ref.substring(21);
        var preparedSchema = ((_a = openApiDefinition.components) === null || _a === void 0 ? void 0 : _a.schemas)[key];
        if (!preparedSchema) {
            throw new Error("Failed to find schema for key " + key);
        }
        this.openApi.checkAndSetSchema(key, preparedSchema);
        return preparedSchema;
    };
    OpenApiMingle.prototype.copyReferencedParameters = function (path, addedPath, openApiDefinition) {
        var _a;
        for (var _i = 0, _b = Object.getOwnPropertyNames(addedPath); _i < _b.length; _i++) {
            var verb = _b[_i];
            var verbInfo = addedPath[verb];
            if (verbInfo.parameters) {
                for (var _c = 0, _d = verbInfo.parameters; _c < _d.length; _c++) {
                    var parameter = _d[_c];
                    var referencedParameter = parameter;
                    if (referencedParameter && referencedParameter.$ref) {
                        this.log("\tChecking referenced parameter " + referencedParameter.$ref + " at " + verb.toUpperCase() + " " + path);
                        if (!referencedParameter.$ref.startsWith("#/components/parameters/")) {
                            throw new Error("Parameter reference " + referencedParameter.$ref + " does not start with #/components/parameters/");
                        }
                        var key = referencedParameter.$ref.substring(24);
                        if (!openApiDefinition.components ||
                            !openApiDefinition.components.parameters ||
                            !openApiDefinition.components.parameters[key]) {
                            throw new Error("Couldn't find definition for parameter " + key + " in #/components/parameters/" + key + " in path " + path + ", verb " + verb);
                        }
                        var preparedParameter = (_a = openApiDefinition.components) === null || _a === void 0 ? void 0 : _a.parameters[key];
                        this.openApi.checkAndSetParameter(key, preparedParameter);
                    }
                }
            }
        }
    };
    // openapi 3.1 changes:
    // https://apisyouwonthate.com/blog/openapi-v31-and-json-schema
    // https://blog.stoplight.io/difference-between-open-v2-v3-v31
    OpenApiMingle.prototype.checkOpenApiVersion = function (version) {
        if (!version.startsWith("3.0.")) {
            throw new Error("We only support OpenApi version 3.0.x, not " + version);
        }
    };
    OpenApiMingle.prototype.filterPaths = function (implementedPaths, serviceDefinition) {
        var _this = this;
        // clone paths
        var output = {};
        var pathsNames = Object.getOwnPropertyNames(implementedPaths);
        pathsNames.forEach(function (pathString) {
            // clone methods
            var pathDefinition = implementedPaths[pathString];
            var methods = Object.getOwnPropertyNames(pathDefinition)
                .sort()
                .join(",")
                .toUpperCase();
            if (pathString.startsWith(serviceDefinition.privatePrefix)) {
                var newPath = "" + serviceDefinition.publicPrefix + pathString.substring(serviceDefinition.privatePrefix.length);
                output[newPath] = pathDefinition;
                _this.log("\tRemapping " + methods + " from [" + pathString + "] to [" + newPath + "]");
            }
            else {
                _this.log("\tSkipping " + methods + " [" + pathString + "] because it's outside private path [" + serviceDefinition.privatePrefix + "*]");
            }
        });
        return output;
    };
    /**
     * Reads a service definition from an uri
     */
    OpenApiMingle.prototype.readDefinition = function (serviceName, service) {
        return __awaiter(this, void 0, void 0, function () {
            var schemaUrl;
            return __generator(this, function (_a) {
                schemaUrl = service.schemaUrl;
                this.log("Retrieving service '" + serviceName + "' from uri " + schemaUrl);
                return [2 /*return*/, this.readJsonUrl(schemaUrl)];
            });
        });
    };
    /**
     * Read a resource uri, from a file or an uri
     */
    OpenApiMingle.prototype.readJsonUrl = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (uri.startsWith("file://")) {
                    return [2 /*return*/, JSON.parse(fs.readFileSync(uri.substr(7), "utf8"))];
                }
                return [2 /*return*/, this.readRemoteUri(uri)];
            });
        });
    };
    /**
     * This method tries to read a remote json file
     */
    OpenApiMingle.prototype.readRemoteUri = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(url, {})];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data];
                }
            });
        });
    };
    return OpenApiMingle;
}());
exports.OpenApiMingle = OpenApiMingle;
//# sourceMappingURL=openapi-mingle.js.map