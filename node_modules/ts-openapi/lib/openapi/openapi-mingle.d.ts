import { OpenApiSchema, SecurityScheme, Servers } from "./openapi.types";
export declare type Service = {
    schemaUrl: string;
    publicPrefix: string;
    privatePrefix: string;
    type: string;
};
export declare type ServiceList = {
    [serviceName: string]: Service;
};
export declare class OpenApiMingle {
    private openApi;
    private json;
    private declaredPaths;
    private logFn;
    constructor(version: string, title: string, description: string, email: string, logFn?: (message: string, e?: Error) => void);
    setServers(servers: Servers): void;
    setLicense(name: string, url: string, termsOfService: string): void;
    declareSecurityScheme(name: string, scheme: SecurityScheme): void;
    addGlobalSecurityScheme(name: string, scopes?: string[] | undefined): void;
    generateJson(): object;
    private log;
    combineServices(serviceList: ServiceList): Promise<void>;
    private copyReferenceSchemas;
    private checkSchema;
    private checkInnerReferences;
    private checkReference;
    private copyReferencedParameters;
    private checkOpenApiVersion;
    private filterPaths;
    /**
     * Reads a service definition from an uri
     */
    readDefinition(serviceName: string, service: Service): Promise<OpenApiSchema | undefined>;
    /**
     * Read a resource uri, from a file or an uri
     */
    private readJsonUrl;
    /**
     * This method tries to read a remote json file
     */
    private readRemoteUri;
}
//# sourceMappingURL=openapi-mingle.d.ts.map